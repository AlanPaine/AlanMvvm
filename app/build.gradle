plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
}
def keystorePropertiesFile =  rootProject.file(rootProject.ext.app.keystore)
// Initialize a new Properties() object called keystoreProperties.
def keystoreProperties = new Properties()
// Load your keystore.properties file into the keystoreProperties object.
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
android {
    compileSdk rootProject.ext.android.compileSdkVersion

    defaultConfig {
        applicationId rootProject.ext.app.appId
        minSdk rootProject.ext.android.minSdkVersion
        targetSdk rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.app.versionCode
        versionName rootProject.ext.app.versionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        manifestPlaceholders = [
                // 友盟 AppKey
                'UMENG_APPKEY' : '你的对应key',
                // QQ AppId
                'QQ_APPID' : '你的对应key',
                // QQ AppKey
                'QQ_APPKEY' : '你的对应key',
                // 微信 AppId
                'WX_APPID' : '你的对应key',
                // 微信 AppKey
                'WX_APPKEY' : '你的对应key',
                // 微博 AppId
                'SN_APPID' : '你的对应key',
                // 微博 AppKey
                'SN_APPKEY' : '你的对应key'
        ]
    }
    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }
    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            // 开发环境下的 BuglyId
            //buildConfigField 'String', 'BUGLY_ID', '\"xxxxxxxxxx\"'
            signingConfig signingConfigs.release
            // 添加清单占位符
            addManifestPlaceholders([
                    'app_name'    :    "AlanMvvm Debug 版"
            ])
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            // 正式环境下的 BuglyId
            //buildConfigField 'String', 'BUGLY_ID', '\"xxxxxxxxxxx\"'
            signingConfig signingConfigs.release
            // 添加清单占位符
            addManifestPlaceholders([
                    'app_name'    :    '@string/app_name'
            ])
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    android.applicationVariants.all { variant ->
        variant.outputs.all {
            if (variant.buildType.name == 'release') {
                variant.getPackageApplication().outputDirectory = new File(project.rootDir.absolutePath + "/outapp/${variant.buildType.name}")
                outputFileName = "alanpaine_${project.name}_v${defaultConfig.versionName}_${new Date().format("yyyyMMddHHmm")}_${variant.buildType.name}.apk"
            } else if (variant.buildType.name == 'debug') {
                outputFileName = "alanpaine_${project.name}_v${defaultConfig.versionName}_${new Date().format("yyyyMMddHHmm")}_${variant.buildType.name}.apk"
            }
        }
    }
    buildFeatures {
        dataBinding = true
        viewBinding = true
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation rootProject.ext.androidx["core.ktx"]
    implementation rootProject.ext.androidx["androidx.material"]
    implementation rootProject.ext.androidx["androidx.appcompat"]
    implementation rootProject.ext.androidx["androidx.constraintlayout"]
    testImplementation rootProject.ext.androidx["junit"]
    androidTestImplementation rootProject.ext.androidx["androidx.test.ext-junit"]
    androidTestImplementation rootProject.ext.androidx["androidx.test.espresso:espresso-core"]
    if (isBuildModule.toBoolean()) {
        implementation project(path: ':library:library-common')
    }else {
        implementation project(path: ':module:module-main')
    }
}